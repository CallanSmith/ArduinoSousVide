// Arudino Sous Vide
// Callan Smith, Nathaniel Mckee
// Waterproof temperature sesnor that controlls timer, with potentiometer that can set desired time and temperature.

#include <LiquidCrystal_I2C.h> // Needed for LCD backpack to work 
#include<EEPROM.h> // Needed for timer code to run 
#include <Wire.h>  // Needed for OneWire to work
#include <OneWire.h> // Necesary library for temp sensor
#include <DallasTemperature.h> // Necesary library for temp sensor

#define ONE_WIRE_BUS 8       //Temp sensor data wire will be connected to pin 8
OneWire oneWire(ONE_WIRE_BUS); // Setting up oneWire
DallasTemperature sensors(&oneWire); // Setting up Dallas temp library
LiquidCrystal_I2C lcd(0x3f, 16, 2);



const int buzzer = 10;
const int relay = 8;
int potPin = 0;  // analog pin used to connect the potentiometer
int potVal;  // variable to read the value from the analog pin
int buttonPin = 3;

long hrs = 0; // Hours variable for timer code
long Min = 0; // minutes variable
long sec = 0; // seconds variable
long startTime = 0; // what is printed when timer is not running
long timeleft = 0; // time left on timer
long timeleftAlpha = 0; // orignal set time
unsigned int check_val = 50;
int add_chk = 0;
int add_hrs = 1;
int add_min = 2;
bool timer = true;
bool RUN = true;
bool min_flag = true;
bool hrs_flag = true;
float tempC = 0;  // Neccesary for code to display temperature in
float tempF = 0;
int tempVal = 0;


void setup() {
  // put your setup code here, to run once:
  sensors.begin();
  Serial.begin(9600);
  lcd.init();
  lcd.backlight();  // Turns on LCD

  pinMode(buzzer, OUTPUT); // Sets buzzer pin 10 as output

  if (EEPROM.read(add_chk) != check_val)  // Not sure exactly how this works, put it is neccesary for code to run
  {
    EEPROM.write(add_chk, check_val);
    EEPROM.write(add_hrs, 0);
    EEPROM.write(add_min, 1);
  }
  else
  {
    hrs = EEPROM.read(add_hrs);
    Min = EEPROM.read(add_min);
  }
  delay(1500);
  INIT();
  lcd.clear();
}

void loop() {

  potVal = analogRead(potPin);
  potVal = map(potVal, 0, 1023, 75, 165); // Setting up Potentiometer to display desired temp, des temp can be between 75-165
  sensors.requestTemperatures(); // Retriving temperatures from temp sesnor
  tempVal = sensors.getTempFByIndex(0); // Stating that TempVal variable = tempeature retrived from temp sesnor



  while (timer == true) { // When Timer is running

    potVal = analogRead(potPin);

    while (min_flag)    { // Puts LCD into setup mode for Min
      potVal = analogRead(potPin);
      Min = map(potVal, 0, 1023, 0, 59); // Have potentiometer value between 0-59 for set minutes
      lcd.setCursor(0, 0);
      lcd.print("SET MINUTES: ");
      lcd.setCursor(6, 1);
      lcd.print(Min); // Print Min value controlled by potetntiometer
      lcd.print(" ");

      if ( digitalRead(buttonPin) == HIGH)
      {
        min_flag = false; // When button is pressed, kick out of Set Min into set hrs
      }
      delay(250);
    }
    while (hrs_flag) // Puts LCD into setup mode for hrs
    {
      delay(250);
      potVal = analogRead(potPin);
      hrs = map(potVal, 0, 1023, 0, 15);// Have potentiometer value between 0-15 for set hours
      lcd.setCursor(0, 0);
      lcd.print("SET  HOURS: ");
      lcd.setCursor(6, 1);
      lcd.print(hrs); // Print hrs value controlled by potentiometer.
      lcd.print(" ");

      if ( digitalRead(buttonPin) == HIGH)
      {
        hrs_flag = false; // When button is pressed again, kick out of set Min to timer
      }
    }

    if (hrs == 0 && Min == 0) // if timer is set to 0 hours and minutes, clear lcd and print INVALID TIME
    {
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print(" INVALID TIME");
      delay(2000);
      hrs_flag = true;
      min_flag = true;
    }
    else
    {
      lcd.clear();         // if invalid time is not entered, then print Please set desired temp, allows user to then set desrierd temp using Potentiometer
      lcd.setCursor(0, 0);
      lcd.print("Please set");
      lcd.setCursor(0, 1);
      lcd.print("desired temp.");
      delay(2000);
      EEPROM.write(add_hrs, hrs);
      EEPROM.write(add_min, Min);
      timer = false;
      startTime = millis();
      timeleftAlpha = ((hrs * 3600000) + (Min * 60000));
      Serial.println(startTime); // once temp is set, go on to timer screen
    }
    INIT();
  }

  // Timer is done, switch to Temp Mode
  potVal = analogRead(potPin);
  potVal = map(potVal, 0, 1023, 75, 165);
  sensors.requestTemperatures();
  tempVal = sensors.getTempFByIndex(0);


  lcd.setCursor(0, 0);
  lcd.print("Temp: ");
  lcd.print(tempVal);
  lcd.print((char)223);
  lcd.setCursor(0, 1);
  lcd.print("Setpoint: ");
  lcd.print(potVal);   //mapped potVal is now "setpoint"
  lcd.print((char)223);

  //  tempAlarm(); //check if temp has gone too high and use buzzer to warn human

  // we stay in temp mode until temperature rises to setpoint.
  //once this occurs, we start the timer.

  if (tempVal >= potVal) // if temperature value if greater than or equal to desired temp (potVal)
  {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Temp: ");
    lcd.print(tempVal);
    lcd.print((char)223);  // Once tempVal >= potVal then it prints temp
    lcd.setCursor(11, 0);
    lcd.print(potVal);      // Once tempVal >= potVal then it prints set temp/desired temp
    lcd.print(" ");

    RUN = true;  // Once tempVal >= potVal then timer starts


    while (RUN) { // while timer is running
      potVal = analogRead(potPin);
      potVal = map(potVal, 0, 1023, 72, 165); // User will be able to change desired/set temp while timer is runnning, so you can change temperature of what you are cooking whilst the timer is stil running
      sensors.requestTemperatures();
      tempVal = sensors.getTempFByIndex(0);//Grabbing tempVal so it can be displayed whilst the timer is going

      lcd.setCursor(0, 0);
      lcd.print("Temp: ");
      lcd.print(tempVal);
      lcd.print((char)223); // print tempVal whilst timer is going
      lcd.print(" ");
      lcd.print(potVal);   //mapped potVal is now "setpoint"
      lcd.print((char)223);

      Serial.print("timeTotal:");// start of actual timer code
      Serial.print(timeleftAlpha);
      Serial.print("\t timeleft:");
      timeleft = timeleftAlpha - millis() + startTime; // time that is printed= How long timer has ran+ time timer was set at. Ex: if timer ran for ten seconds it would be -10, it orginal set time was 40 seconds, it would be -10+40. 30 seconds would be printed time
      Serial.println(timeleft);

      hrs = (timeleft / 3600000);
      Min = ((timeleft / 60000) - (hrs * 60)); // Code is saying min=hours/60
      sec = ((timeleft / 1000) - ((hrs * 3600) + ( Min * 60))); // Code is saying
      lcd.setCursor(4, 1);
      lcd.print(hrs);  // hrs printed
      lcd.print(':');  // colon, min printed, colon, seconds printed
      if (Min < 10)
        lcd.print("0");
      lcd.print(Min);
      lcd.print(':');
      if (sec < 10)
        lcd.print("0");
      lcd.print(sec);


      if (tempVal >= potVal + 10) // If temperature is 10 degrees above desired tempearture, alert user that temp is to high/Over heating
      {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("TIMER STOPPED");
        lcd.setCursor(0, 1);
        lcd.print("Over heating");

        RUN = false; // timer stop, then go back to normal screen once not overheating
        INIT();
        break;
      }

      if (hrs == 0 && Min == 0 && sec == 0) // No idea why this is needed but timer doesnt work w/o it

      {
        INIT();
      }
      if (timeleft < 0) { // Once timer is done
        lcd.clear();
        lcd.setCursor(3, 0);
        lcd.print("Timer Done");
        lcd.setCursor(3, 1);
        lcd.print("Food Ready!");
        tone(buzzer, 1000);  // buzzer on when timer done
        delay(1000);
        noTone(buzzer);
        delay(1000);
      }

    }

  }

}


void INIT() // neccesary for all of the INITs
{
}

